{"version":3,"sources":["apiCalls/apiCalls.js","dropdownData.js","NavBar/NavBar.js","RandomActivity/RandomActivity.js","ActivityCard/ActivityCard.js","SavedActivities/SavedActivities.js","Dropdown/Dropdown.js","App/App.js","index.js"],"names":["getFilteredActivity","type","fetch","then","response","ok","Error","json","activityTypeDropdown","id","name","participantNumDropdown","PropTypes","array","NavBar","className","to","RandomActivity","randomActivity","savedActivities","generateNewActivity","updateSavedActivities","activity","participants","onClick","isSaved","filteredActivities","filter","savedActivity","key","toggleActivity","link","target","rel","href","ActivityCard","props","size","data-testid","deleteSavedActivity","SavedActivities","length","map","Dropdown","dropdownValues","filterSearchResults","dropdownType","onChange","event","value","toLowerCase","App","useState","setRandomActivity","setSavedActivities","activitySearchType","setActivitySearchType","participantSearchNum","setParticipantSearchNum","useEffect","localStorage","storedActivities","getSavedActivitiesFromStorage","currentActivity","getSavedCurrentActivityFromStorage","saveToStorage","saveCurrentActivitiy","getItem","parsedActivities","JSON","parse","storedCurrentActivity","parsedCurrentActivity","clear","stringifiedActivities","stringify","setItem","stringifiedCurrentActivity","num","data","formatAPIData","catch","error","console","Number","filterActivityParticipants","cleanedData","dropdownInput","exact","path","aria-label","activities","updateType","activityKey","router","basename","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.806a22f0.chunk.js","sourcesContent":["export const getRandomActivity = () => {\n  return fetch('https://www.boredapi.com/api/activity/')\n  .then(response => {\n    if (!response.ok) {\n      throw Error('Failed to fetch activity.')\n    }\n    return response.json()\n  })\n}\n\nexport const getFilteredActivity = (type) => {\n  return fetch(`https://www.boredapi.com/api/activity?type=${type}`)\n  .then(response => {\n    if (!response.ok) {\n      throw Error(`Failed to fetch ${type} activity.`)\n    }\n    return response.json()\n  })\n}\n\nexport const getFilteredParticipantActivity = (num) => {\n  return fetch(`https://www.boredapi.com/api/activity?participants=${num}`)\n  .then(response => {\n    if (!response.ok) {\n      throw Error(`Failed to fetch activity with ${num} participants.`)\n    }\n    return response.json()\n  })\n}","import PropTypes from 'prop-types';\n\nexport const activityTypeDropdown = [\n  {id: 0, name: 'Any', type: 'activity'},\n  {id: 1, name: 'Busywork', type: 'activity'},\n  {id: 2, name: 'Charity', type: 'activity'},\n  {id: 3, name: 'Cooking', type: 'activity'},\n  {id: 4, name: 'DIY', type: 'activity'},\n  {id: 5, name: 'Education', type: 'activity'},\n  {id: 6, name: 'Music', type: 'activity'},\n  {id: 7, name: 'Recreational', type: 'activity'},\n  {id: 8, name: 'Relaxation', type: 'activity'},\n  {id: 9, name: 'Social', type: 'activity'}\n]\n\nexport const participantNumDropdown = [\n  {id: 10, name: 'Any', type: 'participants'},\n  {id: 11, name: '1', type: 'participants'},\n  {id: 12, name: '2', type: 'participants'},\n  {id: 13, name: '3', type: 'participants'}\n] \n\nactivityTypeDropdown.PropTypes = {\n  activityTypeDropdown: PropTypes.array\n};\n\nparticipantNumDropdown.PropTypes = {\n  participantNumDropdown: PropTypes.array\n};\n","import { Link } from 'react-router-dom';\nimport './NavBar.scss';\n\nconst NavBar = () => {\n  return(\n    <section className='nav'>\n      <Link to='/'>\n        <p className='nav-title'>Home</p>\n      </Link>\n      <Link to='/random-activity'>\n        <p className='nav-title'>Random Activity</p>\n      </Link>\n      <Link to='/saved-activities'>\n        <p className='nav-title'>Saved Activities</p>\n      </Link>\n    </section>\n  )\n}\n\nexport default NavBar;","import PropTypes from 'prop-types';\nimport './RandomActivity.scss'\n\nconst RandomActivity = ({ randomActivity, savedActivities, generateNewActivity, updateSavedActivities}) => {\n  const toggleActivity = (randomActivity) => {\n    if (randomActivity.isSaved === false) {\n      randomActivity.isSaved = true\n      return updateSavedActivities(randomActivity, 'save')\n    } else if (randomActivity.isSaved === true) {\n      randomActivity.isSaved = false\n      const filteredActivities = savedActivities.filter(savedActivity => {\n        return savedActivity.key !== randomActivity.key\n      })\n      updateSavedActivities(filteredActivities, 'delete')\n    }\n  }\n\n  const generateActivityCard = () => {\n    return(\n      <section className='activity-card'>\n        <h1 className='activity-title'>{randomActivity.activity}</h1>\n        <section className='activity-details'>\n          <p className='activity-type'><b>Activity Type:</b> &nbsp;{randomActivity.type}</p>\n          <p className='activity-participants'><b>Number of Participants:</b> &nbsp; {randomActivity.participants}</p>\n        </section>\n        <section className='button-container'>\n          <button onClick={() => toggleActivity(randomActivity)} className='buttons'>\n            {randomActivity.isSaved ? '- Remove Activity' : '+ Save Activity'}\n          </button>\n          <button onClick={generateNewActivity} className='buttons'>\n            Show New Activity\n          </button>\n        </section>\n        {randomActivity.link !== '' && <p className='get-started-link'>Want to get started? Click <a target='_blank' rel=\"noreferrer\" className='get-started-here'href={`${randomActivity.link}`}>HERE!</a></p>}\n      </section>\n    )\n  }\n\n  return(\n    <section>\n      {generateActivityCard()}\n    </section>\n  )\n}\n\nexport default RandomActivity;\n\nRandomActivity.propTypes = {\n  randomActivity: PropTypes.object,\n  savedActivities: PropTypes.array,\n  generateNewActivity: PropTypes.func,\n  updateSavedActivities: PropTypes.func\n};","import { BsPeopleFill } from 'react-icons/bs'\nimport { MdSchool, MdWork } from 'react-icons/md'\nimport { AiFillPhone } from 'react-icons/ai'\nimport { FaHammer, FaBath, FaMusic, FaHiking } from 'react-icons/fa'\nimport { BiDonateHeart } from 'react-icons/bi'\nimport { GiCookingPot } from 'react-icons/gi'\nimport './ActivityCard.scss'\n\nconst ActivityCard = (props) => {\n  const determineIcon = () => {\n    if (props.type === 'education') {\n      return <MdSchool size={20} data-testid='education'/>\n    } else if (props.type === 'recreational') {\n      return <FaHiking size={20} data-testid='recreational'/>\n    } else if (props.type === 'social') {\n      return <AiFillPhone size={20} data-testid='social'/>\n    } else if (props.type === 'diy') {\n      return <FaHammer size={20} data-testid='diy'/>\n    } else if (props.type === 'charity') {\n      return <BiDonateHeart size={20} data-testid='charity'/>\n    } else if (props.type === 'cooking') {\n      return <GiCookingPot size={20} data-testid='cooking'/>\n    } else if (props.type === 'relaxation') {\n      return <FaBath size={20} data-testid='relaxation'/>\n    } else if (props.type === 'music') {\n      return <FaMusic size={20} data-testid='music'/>\n    } else if (props.type === 'busywork') {\n      return <MdWork size={20} data-testid='busywork'/>\n    }\n  }\n\n  return(\n    <section className='single-activity-card'>\n      <h1 className='title'>{props.activity}</h1>\n      <section className='card-details'>\n        <p className='detail'>{determineIcon()} &nbsp; {props.type}</p>\n        <p className='detail'><BsPeopleFill size={20}/> &nbsp; {props.participants}</p>\n      </section>\n      <button data-testid={props.id} onClick={() => props.deleteSavedActivity(props.id)} className='remove-button'>REMOVE ACTIVITY</button>\n    </section>\n  )\n}\n\nexport default ActivityCard;","import ActivityCard from '../ActivityCard/ActivityCard.js';\nimport PropTypes from 'prop-types';\nimport './SavedActivities.scss';\n\nconst SavedActivities = ({savedActivities, deleteSavedActivity }) => {\n  const generateActivityCards = () => {\n    return savedActivities.map(activity => {\n      return(\n        <section key={activity.key}>\n          <ActivityCard \n            activity={activity.activity}\n            type={activity.type}\n            participants={activity.participants}\n            deleteSavedActivity={deleteSavedActivity}\n            id={activity.key}\n            key={activity.key}\n          />\n        </section>\n      )\n    })\n  }\n\n  return(\n    <section className='saved-activities'>\n      <h1 className='saved-title'>Saved Activities</h1>\n      <section className='all-cards'>\n        {savedActivities.length > 0 && generateActivityCards() }\n        {savedActivities.length === 0 && <p>No saved activites yet! Your saved activities will be shown here.</p>}\n      </section>\n    </section>\n  )\n}\n\nexport default SavedActivities;\n\nSavedActivities.propTypes = {\n  savedActivities: PropTypes.array,\n  deleteSavedActivity: PropTypes.func\n};\n\n","import PropTypes from 'prop-types';\n\nconst Dropdown = ({ dropdownValues, filterSearchResults, dropdownType}) => {\n\n  const generateDropdown = () => {\n    return dropdownValues.map(value => {\n      return(\n        <option\n          id={value.type}\n          data-testid={value.name}\n          key={value.id}\n          value={`${value.name}`}>\n            {value.name}\n        </option>\n      )\n    })\n  }\n\n  const handleDropdownChange = (event) => {\n    filterSearchResults(event.target.value.toLowerCase(), event.target[0].id)\n  }\n\n  return(\n    <select\n      id={`${dropdownType} dropdown`}\n      data-testid ={`${dropdownType} dropdown`}\n      onChange={handleDropdownChange}>\n        {generateDropdown()}\n    </select>\n  )\n}\n\nexport default Dropdown;\n\nDropdown.propTypes = {\n  dropdownValues: PropTypes.array,\n  filterSearchResults: PropTypes.func,\n  dropdownType: PropTypes.string\n};","import React, { useState, useEffect } from 'react';\nimport { Route, Link } from 'react-router-dom';\nimport { getFilteredActivity, getFilteredParticipantActivity, getRandomActivity } from '../apiCalls/apiCalls.js';\nimport { FaQuestion } from 'react-icons/fa';\nimport { activityTypeDropdown, participantNumDropdown } from '../dropdownData.js';\nimport NavBar from '../NavBar/NavBar.js';\nimport RandomActivity from '../RandomActivity/RandomActivity.js';\nimport SavedActivities from '../SavedActivities/SavedActivities.js';\nimport Dropdown from '../Dropdown/Dropdown.js';\nimport './App.scss';\n\nfunction App() {\n  const [randomActivity, setRandomActivity] = useState({})\n  const [savedActivities, setSavedActivities] = useState([])\n  const [activitySearchType, setActivitySearchType] = useState('any')\n  const [participantSearchNum, setParticipantSearchNum] = useState('any')\n\n  useEffect(() => {\n    if(localStorage.storedActivities && localStorage.length === 1) {\n      getSavedActivitiesFromStorage()\n    } else if (localStorage.currentActivity && localStorage.length === 1) {\n      getSavedCurrentActivityFromStorage()\n    } else if (localStorage.length === 2) {\n      getSavedActivitiesFromStorage()\n      getSavedCurrentActivityFromStorage()\n    }\n  }, [])\n\n  useEffect(() => {\n    saveToStorage()\n  }, [savedActivities])\n\n  useEffect(() => {\n    saveCurrentActivitiy()\n  }, [randomActivity])\n\n  const getSavedActivitiesFromStorage = () => {\n    let storedActivities = localStorage.getItem('storedActivities')\n    let parsedActivities = JSON.parse(storedActivities)\n    setSavedActivities(parsedActivities)\n  }\n\n  const getSavedCurrentActivityFromStorage = () => {\n    let storedCurrentActivity = localStorage.getItem('storedCurrentActivity')\n    let parsedCurrentActivity = JSON.parse(storedCurrentActivity)\n    setRandomActivity(parsedCurrentActivity)\n  }\n\n  const saveToStorage = () => {\n    localStorage.clear()\n    let stringifiedActivities = JSON.stringify(savedActivities)\n    localStorage.setItem('storedActivities', stringifiedActivities)\n  }\n\n  const saveCurrentActivitiy = () => {\n    localStorage.clear()\n    saveToStorage()\n    let stringifiedCurrentActivity = JSON.stringify(randomActivity)\n    localStorage.setItem('storedCurrentActivity', stringifiedCurrentActivity)\n  }\n\n  const generateNewActivity = () => {\n    if (activitySearchType === 'any' && participantSearchNum === 'any') {\n      getRandomActivity()\n      .then(data => formatAPIData(data))\n      .catch(error => console.error)\n    } else if (activitySearchType !== 'any' && participantSearchNum === 'any') {\n      getFilteredActivity(activitySearchType)\n      .then(data => formatAPIData(data))\n      .catch(error => console.error)\n    } else if (activitySearchType === 'any' && participantSearchNum !== 'any') {\n      getFilteredParticipantActivity(Number(participantSearchNum))\n      .then(data => formatAPIData(data))\n      .catch(error => console.error)\n    } else if (activitySearchType !== 'any' && participantSearchNum !== 'any') {\n      getFilteredActivity(activitySearchType)\n      .then(data => filterActivityParticipants(data))\n      .catch(error => console.error)\n    }\n  }\n\n  const filterActivityParticipants = (data) => {\n    if (data.participants === Number(participantSearchNum)) {\n      formatAPIData(data)\n    } else {\n      getFilteredActivity(activitySearchType)\n      .then(data => filterActivityParticipants(data))\n      .catch(error => console.error)\n    } \n  }\n\n  const formatAPIData = (data) => {\n    const cleanedData = {\n      activity: data.activity,\n      key: data.key,\n      link: data.link,\n      participants: data.participants,\n      type: data.type,\n      isSaved: false\n    }\n    setRandomActivity(cleanedData)\n  }\n\n  const updateSavedActivities = (activities, updateType) => {\n    if(updateType === 'save') {\n      setSavedActivities([...savedActivities, activities])\n    } else {\n      setSavedActivities(activities)\n    }\n  }\n\n  const deleteSavedActivity = (activityKey) => {\n    const filteredActivities = savedActivities.filter(savedActivity => {\n      return savedActivity.key !== activityKey\n    })\n    setSavedActivities(filteredActivities)\n    generateNewActivity(activitySearchType, participantSearchNum)\n  }\n\n  const filterSearchResults = (dropdownInput, dropdownType) => {\n    if (dropdownType === 'activity') {\n      setActivitySearchType(dropdownInput)\n    } else {\n      setParticipantSearchNum(dropdownInput)\n    }\n  }\n\n  return(\n    <section>\n      <header>\n        <Route exact path={['/random-activity', '/saved-activities']}>\n          <h1 className='website-title'>IDK</h1>\n        </Route>\n        <h1> </h1>\n        <nav>\n          <NavBar />\n        </nav>\n      </header>\n      <Route exact path='/'>\n        <h1 className='home-title'>IDK</h1>\n        <p className='tagline'>Not sure what to today? Click below for some fun ideas!</p>\n      </Route>\n      <Route exact path={['/', '/random-activity']}>\n        <section className='filter-activities'>\n          <p>Show me</p>\n          <Dropdown \n            dropdownValues={activityTypeDropdown}\n            filterSearchResults={filterSearchResults}\n            dropdownType='activity'\n          />\n          <p>activity with</p>\n          <Dropdown\n            dropdownValues={participantNumDropdown}\n            filterSearchResults={filterSearchResults}\n            dropdownType='participants'\n          />\n          <p>participants</p>\n        </section>\n      </Route>\n      <Route \n        exact path='/'>\n      <Link to='random-activity' className='find-activity'>\n        <button onClick={generateNewActivity} aria-label='random-activity-button' className='find-activity-button'>\n          <FaQuestion size={72} data-testid='question-button' />\n        </button>\n      </Link>\n      </Route>\n      <Route \n        exact path='/random-activity'>\n          <RandomActivity \n            randomActivity={randomActivity}\n            savedActivities={savedActivities}\n            generateNewActivity={generateNewActivity}\n            updateSavedActivities={updateSavedActivities}\n          />\n      </Route>\n      <Route  \n        exact path='/saved-activities'>\n          <SavedActivities \n            savedActivities={savedActivities}\n            deleteSavedActivity={deleteSavedActivity}\n          />\n      </Route>\n    </section>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App/App.js';\nimport { BrowserRouter } from 'react-router-dom';\n\nconst router = <BrowserRouter basename='/idk'><App /></BrowserRouter>\n\nReactDOM.render(router, document.getElementById('root'));\n"],"sourceRoot":""}