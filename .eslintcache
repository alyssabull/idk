[{"/Users/alyssabull/Turing/mod3/projects/idk/src/index.js":"1","/Users/alyssabull/Turing/mod3/projects/idk/src/App/App.js":"2","/Users/alyssabull/Turing/mod3/projects/idk/src/RandomActivity/RandomActivity.js":"3","/Users/alyssabull/Turing/mod3/projects/idk/src/SavedActivities/SavedActivities.js":"4","/Users/alyssabull/Turing/mod3/projects/idk/src/ActivityCard/ActivityCard.js":"5","/Users/alyssabull/Turing/mod3/projects/idk/src/Dropdown/Dropdown.js":"6","/Users/alyssabull/Turing/mod3/projects/idk/src/dropdownData.js":"7","/Users/alyssabull/Turing/mod3/projects/idk/src/apiCalls/apiCalls.js":"8","/Users/alyssabull/Turing/mod3/projects/idk/src/NavBar/NavBar.js":"9"},{"size":319,"mtime":1610572868165,"results":"10","hashOfConfig":"11"},{"size":6352,"mtime":1611008796326,"results":"12","hashOfConfig":"11"},{"size":1946,"mtime":1611009023804,"results":"13","hashOfConfig":"11"},{"size":1157,"mtime":1611009309742,"results":"14","hashOfConfig":"11"},{"size":1640,"mtime":1611006068451,"results":"15","hashOfConfig":"11"},{"size":908,"mtime":1611009004182,"results":"16","hashOfConfig":"11"},{"size":921,"mtime":1611008660436,"results":"17","hashOfConfig":"11"},{"size":777,"mtime":1611006068465,"results":"18","hashOfConfig":"11"},{"size":455,"mtime":1610749843072,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"x428a0",{"filePath":"23","messages":"24","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"22"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"/Users/alyssabull/Turing/mod3/projects/idk/src/index.js",[],["41","42"],"/Users/alyssabull/Turing/mod3/projects/idk/src/App/App.js",["43","44","45"],"import React, { useState, useEffect } from 'react';\nimport { Route, Link } from 'react-router-dom';\nimport { getFilteredActivity, getFilteredParticipantActivity, getRandomActivity } from '../apiCalls/apiCalls.js';\nimport { FaQuestion } from 'react-icons/fa';\nimport { activityTypeDropdown, participantNumDropdown } from '../dropdownData.js';\nimport NavBar from '../NavBar/NavBar.js';\nimport RandomActivity from '../RandomActivity/RandomActivity.js';\nimport SavedActivities from '../SavedActivities/SavedActivities.js';\nimport Dropdown from '../Dropdown/Dropdown.js';\nimport './App.scss';\n\nfunction App() {\n\n  const [randomActivity, setRandomActivity] = useState({})\n  const [savedActivities, setSavedActivities] = useState([])\n  const [activitySearchType, setActivitySearchType] = useState('any')\n  const [participantSearchNum, setParticipantSearchNum] = useState('any')\n\n  useEffect(() => {\n    if(localStorage.storedActivities && localStorage.length === 1) {\n      getSavedActivitiesFromStorage()\n    } else if (localStorage.currentActivity && localStorage.length === 1) {\n      getSavedCurrentActivityFromStorage()\n    } else if (localStorage.length === 2) {\n      getSavedActivitiesFromStorage()\n      getSavedCurrentActivityFromStorage()\n    }\n  }, [])\n\n  useEffect(() => {\n    saveToStorage()\n  }, [savedActivities])\n\n  useEffect(() => {\n    saveCurrentActivitiy()\n  }, [randomActivity])\n\n  const getSavedActivitiesFromStorage = () => {\n    let storedActivities = localStorage.getItem('storedActivities')\n    let parsedActivities = JSON.parse(storedActivities)\n    setSavedActivities(parsedActivities)\n  }\n\n  const getSavedCurrentActivityFromStorage = () => {\n    let storedCurrentActivity = localStorage.getItem('storedCurrentActivity')\n    let parsedCurrentActivity = JSON.parse(storedCurrentActivity)\n    setRandomActivity(parsedCurrentActivity)\n  }\n\n  const saveToStorage = () => {\n    localStorage.clear()\n    let stringifiedActivities = JSON.stringify(savedActivities)\n    localStorage.setItem('storedActivities', stringifiedActivities)\n  }\n\n  const saveCurrentActivitiy = () => {\n    localStorage.clear()\n    saveToStorage()\n    let stringifiedCurrentActivity = JSON.stringify(randomActivity)\n    localStorage.setItem('storedCurrentActivity', stringifiedCurrentActivity)\n  }\n\n  const generateNewActivity = () => {\n    if (activitySearchType === 'any' && participantSearchNum === 'any') {\n      getRandomActivity()\n      .then(data => formatAPIData(data))\n      .catch(error => console.error)\n    } else if (activitySearchType !== 'any' && participantSearchNum === 'any') {\n      getFilteredActivity(activitySearchType)\n      .then(data => formatAPIData(data))\n      .catch(error => console.error)\n    } else if (activitySearchType === 'any' && participantSearchNum !== 'any') {\n      getFilteredParticipantActivity(Number(participantSearchNum))\n      .then(data => formatAPIData(data))\n      .catch(error => console.error)\n    } else if (activitySearchType !== 'any' && participantSearchNum !== 'any') {\n      getFilteredActivity(activitySearchType)\n      .then(data => filterActivityParticipants(data))\n      .catch(error => console.error)\n    }\n  }\n\n  const filterActivityParticipants = (data) => {\n    if (data.participants === Number(participantSearchNum)) {\n      formatAPIData(data)\n    } else {\n      getFilteredActivity(activitySearchType)\n      .then(data => filterActivityParticipants(data))\n      .catch(error => console.error)\n    }\n  }\n\n  const formatAPIData = (data) => {\n    const cleanedData = {\n      activity: data.activity,\n      key: data.key,\n      link: data.link,\n      participants: data.participants,\n      type: data.type,\n      isSaved: false\n    }\n    setRandomActivity(cleanedData)\n  }\n\n  const updateSavedActivities = (activities, updateType) => {\n    if(updateType === 'save') {\n      setSavedActivities([...savedActivities, activities])\n    } else {\n      setSavedActivities(activities)\n    }\n  }\n\n  const deleteSavedActivity = (activityKey) => {\n    const filteredActivities = savedActivities.filter(savedActivity => {\n      return savedActivity.key !== activityKey\n    })\n\n    setSavedActivities(filteredActivities)\n    generateNewActivity(activitySearchType, participantSearchNum)\n  }\n\n  const filterSearchResults = (dropdownInput, dropdownType) => {\n    if (dropdownType === 'activity') {\n      setActivitySearchType(dropdownInput)\n    } else {\n      setParticipantSearchNum(dropdownInput)\n    }\n  }\n\n  return(\n    <section>\n      <header>\n        <Route exact path={['/random-activity', '/saved-activities']}>\n          <h1 className='website-title'>IDK</h1>\n        </Route>\n        <h1></h1>\n        <nav>\n          <NavBar />\n        </nav>\n      </header>\n      <Route exact path='/'>\n        <h1 className='home-title'>IDK</h1>\n        <p className='tagline'>Not sure what to today? Click below for some fun ideas!</p>\n      </Route>\n      <Route exact path={['/', '/random-activity']}>\n        <section className='filter-activities'>\n          <p>Show me</p>\n          <Dropdown \n            dropdownValues={activityTypeDropdown}\n            filterSearchResults={filterSearchResults}\n            dropdownType='activity'\n          />\n          <p>activity with</p>\n          <Dropdown\n            dropdownValues={participantNumDropdown}\n            filterSearchResults={filterSearchResults}\n            dropdownType='participants'\n          />\n          <p>participants</p>\n        </section>\n      </Route>\n      <Route \n        exact path='/'>\n      <Link to='random-activity' className='find-activity'>\n        <button onClick={generateNewActivity} aria-label='random-activity-button' className='find-activity-button'>\n          <FaQuestion size={72} data-testid='question-button' />\n        </button>\n      </Link>\n      </Route>\n      <Route \n        exact path='/random-activity'>\n          <RandomActivity \n            randomActivity={randomActivity}\n            savedActivities={savedActivities}\n            generateNewActivity={generateNewActivity}\n            updateSavedActivities={updateSavedActivities}\n          />\n      </Route>\n      <Route  \n        exact path='/saved-activities'>\n          <SavedActivities \n            savedActivities={savedActivities}\n            deleteSavedActivity={deleteSavedActivity}\n          />\n      </Route>\n    </section>\n  )\n}\n\nexport default App;\n","/Users/alyssabull/Turing/mod3/projects/idk/src/RandomActivity/RandomActivity.js",["46"],"import PropTypes from 'prop-types';\nimport './RandomActivity.scss'\n\nconst RandomActivity = ({ randomActivity, savedActivities, generateNewActivity, updateSavedActivities}) => {\n  const toggleActivity = (activity) => {\n    if (activity.isSaved === false) {\n      activity.isSaved = true\n      return updateSavedActivities(activity, 'save')\n    } else if (activity.isSaved === true) {\n      activity.isSaved = false\n      const filteredActivities = savedActivities.filter(savedActivity => {\n        return savedActivity.key !== activity.key\n      })\n      updateSavedActivities(filteredActivities, 'delete')\n    }\n  }\n\n  const generateActivityCard = () => {\n      return(\n        <section className='activity-card'>\n          <h1 className='activity-title'>{randomActivity.activity}</h1>\n          <section className='activity-details'>\n            <p className='activity-type'><b>Activity Type:</b> &nbsp;{randomActivity.type}</p>\n            <p className='activity-participants'><b>Number of Participants:</b> &nbsp; {randomActivity.participants}</p>\n          </section>\n          <section>\n            <button onClick={() => toggleActivity(randomActivity)} className='buttons'>\n              {randomActivity.isSaved ? '- Remove Activity' : '+ Save Activity'}\n            </button>\n            <button onClick={generateNewActivity} className='buttons'>\n              Show New Activity\n            </button>\n          </section>\n          {randomActivity.link !== '' && <p className='get-started-link'>Want to get started? Click <a target='_blank' className='get-started-link' href={`${randomActivity.link}`}>HERE!</a></p>}\n        </section>\n      )\n  }\n\n  return(\n    <section>\n      {generateActivityCard()}\n    </section>\n  )\n}\n\nexport default RandomActivity;\n\nRandomActivity.propTypes = {\n  randomActivity: PropTypes.object,\n  savedActivities: PropTypes.array,\n  generateNewActivity: PropTypes.func,\n  updateSavedActivities: PropTypes.func\n}","/Users/alyssabull/Turing/mod3/projects/idk/src/SavedActivities/SavedActivities.js",[],"/Users/alyssabull/Turing/mod3/projects/idk/src/ActivityCard/ActivityCard.js",[],"/Users/alyssabull/Turing/mod3/projects/idk/src/Dropdown/Dropdown.js",[],"/Users/alyssabull/Turing/mod3/projects/idk/src/dropdownData.js",[],"/Users/alyssabull/Turing/mod3/projects/idk/src/apiCalls/apiCalls.js",[],"/Users/alyssabull/Turing/mod3/projects/idk/src/NavBar/NavBar.js",[],{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","severity":1,"message":"52","line":32,"column":6,"nodeType":"53","endLine":32,"endColumn":23,"suggestions":"54"},{"ruleId":"51","severity":1,"message":"55","line":36,"column":6,"nodeType":"53","endLine":36,"endColumn":22,"suggestions":"56"},{"ruleId":"57","severity":1,"message":"58","line":136,"column":9,"nodeType":"59","endLine":136,"endColumn":13},{"ruleId":"60","severity":1,"message":"61","line":34,"column":101,"nodeType":"59","endLine":34,"endColumn":181},"no-native-reassign",["62"],"no-negated-in-lhs",["63"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'saveToStorage'. Either include it or remove the dependency array.","ArrayExpression",["64"],"React Hook useEffect has a missing dependency: 'saveCurrentActivitiy'. Either include it or remove the dependency array.",["65"],"jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","JSXOpeningElement","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","no-global-assign","no-unsafe-negation",{"desc":"66","fix":"67"},{"desc":"68","fix":"69"},"Update the dependencies array to be: [saveToStorage, savedActivities]",{"range":"70","text":"71"},"Update the dependencies array to be: [randomActivity, saveCurrentActivitiy]",{"range":"72","text":"73"},[1304,1321],"[saveToStorage, savedActivities]",[1376,1392],"[randomActivity, saveCurrentActivitiy]"]