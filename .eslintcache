[{"/Users/alyssabull/Turing/mod3/projects/idk/src/index.js":"1","/Users/alyssabull/Turing/mod3/projects/idk/src/App/App.js":"2","/Users/alyssabull/Turing/mod3/projects/idk/src/RandomActivity/RandomActivity.js":"3","/Users/alyssabull/Turing/mod3/projects/idk/src/SavedActivities/SavedActivities.js":"4","/Users/alyssabull/Turing/mod3/projects/idk/src/ActivityCard/ActivityCard.js":"5","/Users/alyssabull/Turing/mod3/projects/idk/src/Dropdown/Dropdown.js":"6","/Users/alyssabull/Turing/mod3/projects/idk/src/dropdownData.js":"7","/Users/alyssabull/Turing/mod3/projects/idk/src/apiCalls/apiCalls.js":"8","/Users/alyssabull/Turing/mod3/projects/idk/src/NavBar/NavBar.js":"9"},{"size":319,"mtime":1610572868165,"results":"10","hashOfConfig":"11"},{"size":6440,"mtime":1610749843070,"results":"12","hashOfConfig":"11"},{"size":1657,"mtime":1610749843074,"results":"13","hashOfConfig":"11"},{"size":983,"mtime":1610683001640,"results":"14","hashOfConfig":"11"},{"size":1617,"mtime":1610749843069,"results":"15","hashOfConfig":"11"},{"size":618,"mtime":1610659743740,"results":"16","hashOfConfig":"11"},{"size":719,"mtime":1610749843075,"results":"17","hashOfConfig":"11"},{"size":462,"mtime":1610749843075,"results":"18","hashOfConfig":"11"},{"size":455,"mtime":1610749843072,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"x428a0",{"filePath":"23","messages":"24","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"22"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"/Users/alyssabull/Turing/mod3/projects/idk/src/index.js",[],["42","43"],"/Users/alyssabull/Turing/mod3/projects/idk/src/App/App.js",["44","45","46"],"import React, { useState, useEffect } from 'react';\nimport { Route, Link } from 'react-router-dom';\nimport { getFilteredActivity, getFilteredParticipantActivity, getRandomActivity } from '../apiCalls/apiCalls.js';\nimport { FaQuestion } from 'react-icons/fa';\nimport { activityTypeDropdown, participantNumDropdown } from '../dropdownData.js';\nimport NavBar from '../NavBar/NavBar.js';\nimport RandomActivity from '../RandomActivity/RandomActivity.js';\nimport SavedActivities from '../SavedActivities/SavedActivities.js';\nimport DropdownFilter from '../Dropdown/Dropdown.js';\nimport './App.scss';\n\nfunction App() {\n\n  const [randomActivity, setRandomActivity] = useState({})\n  const [savedActivities, setSavedActivities] = useState([])\n  const [activitySearchType, setActivitySearchType] = useState('any')\n  const [participantSearchNum, setParticipantSearchNum] = useState('any')\n\n  useEffect(() => {\n    if(localStorage.storedActivities && localStorage.length === 1) {\n      getSavedActivitiesFromStorage()\n    } else if (localStorage.currentActivity && localStorage.length === 1) {\n      getSavedCurrentActivityFromStorage()\n    } else if (localStorage.length === 2) {\n      getSavedActivitiesFromStorage()\n      getSavedCurrentActivityFromStorage()\n    }\n  }, [])\n\n  useEffect(() => {\n    saveToStorage()\n  }, [savedActivities])\n\n  useEffect(() => {\n    saveCurrentActivitiy()\n    setActivitySearchType('any')\n    setParticipantSearchNum('any')\n  }, [randomActivity])\n\n  const getSavedActivitiesFromStorage = () => {\n    let storedActivities = localStorage.getItem('storedActivities')\n    let parsedActivities = JSON.parse(storedActivities)\n    setSavedActivities(parsedActivities)\n  }\n\n  const getSavedCurrentActivityFromStorage = () => {\n    let storedCurrentActivity = localStorage.getItem('storedCurrentActivity')\n    let parsedCurrentActivity = JSON.parse(storedCurrentActivity)\n    setRandomActivity(parsedCurrentActivity)\n  }\n\n  const generateNewActivity = () => {\n    if (activitySearchType === 'any' && participantSearchNum === 'any') {\n      getRandomActivity()\n      .then(data => formatAPIData(data))\n      .catch(error => console.error)\n    } else if (activitySearchType !== 'any' && participantSearchNum === 'any') {\n      getFilteredActivity(activitySearchType)\n      .then(data => formatAPIData(data))\n      .catch(error => console.error)\n    } else if (activitySearchType === 'any' && participantSearchNum !== 'any') {\n      getFilteredParticipantActivity(Number(participantSearchNum))\n      .then(data => formatAPIData(data))\n      .catch(error => console.error)\n    } else if (activitySearchType !== 'any' && participantSearchNum !== 'any') {\n      getFilteredActivity(activitySearchType)\n      .then(data => filterActivityParticipants(data))\n      .catch(error => console.error)\n    }\n  }\n\n  const filterActivityParticipants = (data) => {\n    if (data.participants === Number(participantSearchNum)) {\n      formatAPIData(data)\n    } else {\n      getFilteredActivity(activitySearchType)\n      .then(data => filterActivityParticipants(data))\n      .catch(error => console.error)\n    }\n  }\n\n  const formatAPIData = (data) => {\n      const cleanedData = {\n        activity: data.activity,\n        key: data.key,\n        link: data.link,\n        participants: data.participants,\n        type: data.type,\n        isSaved: false\n      }\n      setRandomActivity(cleanedData)\n  }\n\n  const updateSavedActivities = (activities, updateType) => {\n    if(updateType === 'save') {\n      setSavedActivities([...savedActivities, activities])\n    } else {\n      setSavedActivities(activities)\n    }\n  }\n\n  const deleteSavedActivity = (activityKey) => {\n    const filteredActivities = savedActivities.filter(savedActivity => {\n      return savedActivity.key !== activityKey\n    })\n\n    setSavedActivities(filteredActivities)\n    generateNewActivity()\n  }\n\n  const saveToStorage = () => {\n    localStorage.clear()\n    let stringifiedActivities = JSON.stringify(savedActivities)\n    localStorage.setItem('storedActivities', stringifiedActivities)\n  }\n\n  const saveCurrentActivitiy = () => {\n    localStorage.clear()\n    saveToStorage()\n    let stringifiedCurrentActivity = JSON.stringify(randomActivity)\n    localStorage.setItem('storedCurrentActivity', stringifiedCurrentActivity)\n  }\n\n  const filterSearchResults = (dropdownInput, dropdownType) => {\n    if (dropdownType === 'activity') {\n      setActivitySearchType(dropdownInput)\n    } else {\n      setParticipantSearchNum(dropdownInput)\n    }\n  }\n\n  return(\n    <section>\n      <header>\n        <Route exact path={['/random-activity', '/saved-activities']}>\n          <h1 className='website-title'>IDK</h1>\n        </Route>\n        <h1></h1>\n        <nav>\n          <NavBar />\n        </nav>\n      </header>\n      <Route exact path='/'>\n        <h1 className='home-title'>IDK</h1>\n        <p className='tagline'>Not sure what to today? Click below for some fun ideas!</p>\n      </Route>\n      <Route exact path={['/', '/random-activity']}>\n        <section className='filter-activities'>\n          <p>Show me</p>\n          <DropdownFilter \n            dropdownValues={activityTypeDropdown}\n            filterSearchResults={filterSearchResults}\n            filterType={activitySearchType}\n            dropdownType='activity'\n          />\n          <p>activity with</p>\n          <DropdownFilter \n            dropdownValues={participantNumDropdown}\n            filterSearchResults={filterSearchResults}\n            filterType={participantSearchNum}\n            dropdownType='participants'\n          />\n          <p>participants</p>\n        </section>\n      </Route>\n      <Route \n        exact path='/'>\n      <Link to='random-activity' className='find-activity'>\n        <button onClick={generateNewActivity} className='find-activity-button'>\n          <FaQuestion size={72}/>\n        </button>\n      </Link>\n      </Route>\n      <Route \n        exact path='/random-activity'>\n          <RandomActivity \n            randomActivity={randomActivity}\n            generateNewActivity={generateNewActivity}\n            savedActivities={savedActivities}\n            updateSavedActivities={updateSavedActivities}\n          />\n      </Route>\n      <Route  \n        exact path='/saved-activities'>\n          <SavedActivities \n            savedActivities={savedActivities}\n            deleteSavedActivity={deleteSavedActivity}\n          />\n      </Route>\n    </section>\n  )\n}\n\nexport default App;\n","/Users/alyssabull/Turing/mod3/projects/idk/src/RandomActivity/RandomActivity.js",["47"],"import './RandomActivity.scss'\n\nconst RandomActivity = (props) => {\n  const toggleActivity = (activity) => {\n    if (activity.isSaved === false) {\n      activity.isSaved = true\n      props.updateSavedActivities(activity, 'save')\n    } else if (activity.isSaved === true) {\n      activity.isSaved = false\n      const filteredActivities = props.savedActivities.filter(savedActivity => {\n        return savedActivity.key !== activity.key\n      })\n      props.updateSavedActivities(filteredActivities, 'delete')\n    }\n  }\n\n  const generateActivityCard = () => {\n      return(\n        <section className='activity-card'>\n          <h1 className='activity-title'>{props.randomActivity.activity}</h1>\n          <section className='activity-details'>\n            <p className='activity-type'><b>Activity Type:</b> &nbsp;{props.randomActivity.type}</p>\n            <p className='activity-participants'><b>Number of Participants:</b> &nbsp; {props.randomActivity.participants}</p>\n          </section>\n          <section>\n            <button onClick={() => toggleActivity(props.randomActivity)} className='buttons'>{props.randomActivity.isSaved ? '- Remove Activity' : '+ Save Activity'}</button>\n            <button onClick={props.generateNewActivity} className='buttons'>Show New Activity</button>\n          </section>\n          {props.randomActivity.link !== '' && <p className='get-started-link'>Want to get started? Click <a target='_blank' className='get-started-link' href={`${props.randomActivity.link}`}>HERE!</a></p>}\n        </section>\n      )\n  }\n\n  return(\n    <section>\n      {generateActivityCard()}\n    </section>\n  )\n}\n\nexport default RandomActivity;","/Users/alyssabull/Turing/mod3/projects/idk/src/SavedActivities/SavedActivities.js",[],"/Users/alyssabull/Turing/mod3/projects/idk/src/ActivityCard/ActivityCard.js",[],["48","49"],"/Users/alyssabull/Turing/mod3/projects/idk/src/Dropdown/Dropdown.js",[],"/Users/alyssabull/Turing/mod3/projects/idk/src/dropdownData.js",[],"/Users/alyssabull/Turing/mod3/projects/idk/src/apiCalls/apiCalls.js",[],"/Users/alyssabull/Turing/mod3/projects/idk/src/NavBar/NavBar.js",[],{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","severity":1,"message":"55","line":32,"column":6,"nodeType":"56","endLine":32,"endColumn":23,"suggestions":"57"},{"ruleId":"54","severity":1,"message":"58","line":38,"column":6,"nodeType":"56","endLine":38,"endColumn":22,"suggestions":"59"},{"ruleId":"60","severity":1,"message":"61","line":138,"column":9,"nodeType":"62","endLine":138,"endColumn":13},{"ruleId":"63","severity":1,"message":"64","line":29,"column":107,"nodeType":"62","endLine":29,"endColumn":193},{"ruleId":"50","replacedBy":"65"},{"ruleId":"52","replacedBy":"66"},"no-native-reassign",["67"],"no-negated-in-lhs",["68"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'saveToStorage'. Either include it or remove the dependency array.","ArrayExpression",["69"],"React Hook useEffect has a missing dependency: 'saveCurrentActivitiy'. Either include it or remove the dependency array.",["70"],"jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","JSXOpeningElement","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener",["67"],["68"],"no-global-assign","no-unsafe-negation",{"desc":"71","fix":"72"},{"desc":"73","fix":"74"},"Update the dependencies array to be: [saveToStorage, savedActivities]",{"range":"75","text":"76"},"Update the dependencies array to be: [randomActivity, saveCurrentActivitiy]",{"range":"77","text":"78"},[1310,1327],"[saveToStorage, savedActivities]",[1450,1466],"[randomActivity, saveCurrentActivitiy]"]